# Go コーディングルール

このドキュメントは A Tour of Go リポジトリにおける Go のコーディングルールを定義します。

## 基本原則

- シンプルさを重視する
- 可読性の高いコードを書く
- Go の標準的な慣習に従う

## コードフォーマット

- `go fmt` を使用してコードをフォーマットする
- インデントには空白ではなくタブを使用する
- 行の長さは80文字を目安とする

## 命名規則

- パッケージ名は小文字の単語を使用する
  - 例: `strings`, `http`, `io`
- 変数名はキャメルケースを使用する
  - エクスポートする変数は大文字で始める
  - パッケージ内部の変数は小文字で始める
  - 例: `UserID`, `firstName`
- 関数名もキャメルケースを使用する
  - エクスポートする関数は大文字で始める
  - パッケージ内部の関数は小文字で始める
  - 例: `ParseJSON`, `calculateTotal`

## エラー処理

- エラーは明示的に処理する
- エラーは戻り値の最後の値として返す
- エラーメッセージは小文字で始め、句点を付けない
- panic は予期せぬエラーにのみ使用する

## コメント

- パッケージ、関数、型の説明にはドキュメンテーションコメントを使用する
- コメントは文章として完結させる
- 日本語のコメントを使用する場合は、一貫性を保つ

## テスト

- テストファイルは `_test.go` で終わる名前にする
- テスト関数は `Test` で始める
- テーブル駆動テストを活用する
- ベンチマークテストは必要に応じて実装する

## パッケージ構成

- 各パッケージは単一の責任を持つ
- 循環依存を避ける
- 標準パッケージを優先して使用する

## 並行処理

- goroutine は適切に管理する
- channel は明示的にクローズする
- context を適切に利用する

## ベストプラクティス

- interface は小さく保つ
- 早期リターンを活用する
- 不要なelse文を避ける
- defer を適切に使用する

## セキュリティ

- 機密情報は環境変数で管理する
- 入力値は適切にバリデーションする
- SQL インジェクションを防ぐ
- クロスサイトスクリプティング（XSS）対策を実施する 